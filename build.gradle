/*
 * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext.kotlinVersion = '1.3.50'
  repositories {
	maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
  }
}

plugins {
  //NB: stdlib version is defined by this plugin's version
  id "org.jetbrains.kotlin.jvm" version "1.3.50"
  id "org.jetbrains.dokka" version "0.9.18"
}


configure(rootProject)  { project ->
  apply plugin: 'kotlin'
  apply from: "gradle/publishing.gradle"
  apply plugin: 'propdeps'

  description = 'Kotlin extensions for Project Reactor'
  group = 'io.projectreactor.kotlin'

  repositories {
	if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
	  maven { url 'https://repo.spring.io/libs-snapshot' }
	}

	maven { url 'https://repo.spring.io/libs-milestone' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	maven { url "https://maven-eclipse.github.io/maven" }
	jcenter()
	mavenCentral()
  }

  configurations.all {
	resolutionStrategy {
	  eachDependency {
		switch (requested.module.toString()) {
		  case "io.projectreactor:reactor-core":
		  case "io.projectreactor:reactor-test":
		  case "io.projectreactor.addons:reactor-adapter":
		  case "io.projectreactor.addons:reactor-extra":
			return useVersion("3.3.0.BUILD-SNAPSHOT")
		}
	  }
	}
  }



  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
  }

  dokka {
	dependsOn jar
	group = "documentation"
	description = "Generates Kotlin API documentation."
	moduleName = "reactor-kotlin-extensions"
	jdkVersion = 8

	outputFormat = "html"
	outputDirectory = new File(project.buildDir, "docs/kdoc")

	externalDocumentationLink {
	url = new URL("https://projectreactor.io/docs/core/release/api/")
	}
	externalDocumentationLink {
	url = new URL("https://projectreactor.io/docs/test/release/api/")
	}
	externalDocumentationLink {
	url = new URL("https://projectreactor.io/docs/extra/release/api/")
	}
	externalDocumentationLink {
	url = new URL("https://projectreactor.io/docs/adapter/release/api/")
	}
	externalDocumentationLink {
	url = new URL("https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/")
	}
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "sources"
	from sourceSets.main.allSource
  }

  task kdocZip(type: Zip, dependsOn: dokka) {
	//ends up similar to javadoc jar: reactor-core-xxxx.RELEASE-kdoc.zip
	archiveClassifier = 'kdoc'
	from(dokka.outputDirectory)
  }

  artifacts {
	archives sourcesJar
	archives kdocZip
  }

  dependencies {
	//dependencies in this group are set with a resolutionStrategy above
	compile 'io.projectreactor:reactor-core'
	optional 'io.projectreactor:reactor-test'
	optional 'io.projectreactor.addons:reactor-adapter'
	optional 'io.projectreactor.addons:reactor-extra'
	testCompile 'io.projectreactor:reactor-test'

	optional "io.reactivex.rxjava2:rxjava:2.2.8"
	optional "org.eclipse.swt:org.eclipse.swt.${getPlatform()}:4.5.2"

	//NB: stdlib version is defined by the kotlin jvm plugin's version
	optional 'org.jetbrains.kotlin:kotlin-stdlib'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.12.2'
  }

}


def getPlatform() {
  String osname = System.properties['os.name']
  String osarch = System.properties['os.arch']
  if (osname.toLowerCase(Locale.ROOT).contains('win')) {
	if (osarch.contains("64")) {
	  return "win32.win32.x86_64"
	}
	return "win32.win32.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("nux")) {
	if (osarch.contains("64")) {
	  return "gtk.linux.x86_64"
	}
	return "gtk.linux.x86"
  }
  if (osname.toLowerCase(Locale.ROOT).contains("mac")) {
	return "cocoa.macosx.x86_64"
  }
  throw new RuntimeException("Unknown OS/Arch: " + osname + ", " + osarch)
}